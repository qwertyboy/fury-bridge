
fury-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  0000066a  000006fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800202  00800202  00000800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000052a  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000234  00000000  00000000  00000e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022d  00000000  00000000  00001042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000253  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000602  00000000  00000000  00001657  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  9e:	0c 94 33 03 	jmp	0x666	; 0x666 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#include "funcs.h"
#include "defs.h"

// timer 0 overflow interrupt for timing
volatile uint32_t timer0_overflow_count = 0;
ISR(TIMER0_OVF_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
	timer0_overflow_count++;
  b8:	80 91 02 02 	lds	r24, 0x0202
  bc:	90 91 03 02 	lds	r25, 0x0203
  c0:	a0 91 04 02 	lds	r26, 0x0204
  c4:	b0 91 05 02 	lds	r27, 0x0205
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	80 93 02 02 	sts	0x0202, r24
  d2:	90 93 03 02 	sts	0x0203, r25
  d6:	a0 93 04 02 	sts	0x0204, r26
  da:	b0 93 05 02 	sts	0x0205, r27
}
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <pinInit>:
*/

// function to initialize pins
void pinInit(){
	// digital outputs
	DDRB |= (LEDPIN | PWMPIN);
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	82 62       	ori	r24, 0x22	; 34
  f4:	84 b9       	out	0x04, r24	; 4
	DDRD |= (DIRA1 | DIRA2 | SDPINA | SDPINB);
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	89 63       	ori	r24, 0x39	; 57
  fa:	8a b9       	out	0x0a, r24	; 10
	
	// digital input, pull-up
	DDRD &= ~(CH1);
  fc:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= CH1;
  fe:	5a 9a       	sbi	0x0b, 2	; 11
 100:	08 95       	ret

00000102 <rcInterruptInit>:
}

// function to set up RC capture interrupt
void rcInterruptInit(){
	// enable on PCINT18
	PCMSK2 |= 0x04;
 102:	ed e6       	ldi	r30, 0x6D	; 109
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	80 83       	st	Z, r24
	// pin change interrupt control register enable 2
	PCICR |= 0x04;
 10c:	e8 e6       	ldi	r30, 0x68	; 104
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	84 60       	ori	r24, 0x04	; 4
 114:	80 83       	st	Z, r24
	
	sei();
 116:	78 94       	sei
 118:	08 95       	ret

0000011a <timerInit>:

// function to set up and enable timers
void timerInit(){
	// timer/counter0 control register A
	// fast pwm
	TCCR0A |= 0x03;
 11a:	84 b5       	in	r24, 0x24	; 36
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	84 bd       	out	0x24, r24	; 36
	// clkio / 64
	TCCR0B |= 0x03;
 120:	85 b5       	in	r24, 0x25	; 37
 122:	83 60       	ori	r24, 0x03	; 3
 124:	85 bd       	out	0x25, r24	; 37
	// enable overflow interrupt
	TIMSK0 |= 0x01;
 126:	ee e6       	ldi	r30, 0x6E	; 110
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
	
	// timer/counter1 control register A
	// 8 bit phase correct, set COM1A1
	TCCR1A |= 0x81;
 130:	e0 e8       	ldi	r30, 0x80	; 128
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	81 68       	ori	r24, 0x81	; 129
 138:	80 83       	st	Z, r24
	// clkio / 1 - no prescaling (32kHz?)
	TCCR1B |= 0x01;
 13a:	e1 e8       	ldi	r30, 0x81	; 129
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <micros>:
// timekeeping function yanked from arduino
uint32_t micros(){
	uint32_t m;
	uint8_t t;
	
	cli();
 146:	f8 94       	cli
	
	m = timer0_overflow_count;
 148:	80 91 02 02 	lds	r24, 0x0202
 14c:	90 91 03 02 	lds	r25, 0x0203
 150:	a0 91 04 02 	lds	r26, 0x0204
 154:	b0 91 05 02 	lds	r27, 0x0205
	t = TCNT0;
 158:	26 b5       	in	r18, 0x26	; 38
	
	if((TIFR0 & 1) && (t < 255)){
 15a:	a8 9b       	sbis	0x15, 0	; 21
 15c:	05 c0       	rjmp	.+10     	; 0x168 <micros+0x22>
 15e:	2f 3f       	cpi	r18, 0xFF	; 255
 160:	19 f0       	breq	.+6      	; 0x168 <micros+0x22>
		m++;
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	a1 1d       	adc	r26, r1
 166:	b1 1d       	adc	r27, r1
	}
	
	sei();
 168:	78 94       	sei
	
	return ((m << 8) + t) * 4;
 16a:	ba 2f       	mov	r27, r26
 16c:	a9 2f       	mov	r26, r25
 16e:	98 2f       	mov	r25, r24
 170:	88 27       	eor	r24, r24
 172:	82 0f       	add	r24, r18
 174:	91 1d       	adc	r25, r1
 176:	a1 1d       	adc	r26, r1
 178:	b1 1d       	adc	r27, r1
 17a:	bc 01       	movw	r22, r24
 17c:	cd 01       	movw	r24, r26
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	88 1f       	adc	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	88 1f       	adc	r24, r24
 18c:	99 1f       	adc	r25, r25
}
 18e:	08 95       	ret

00000190 <checkPulse>:

// function to check if pulse is withing reasonable limits
uint8_t checkPulse(uint16_t ch){
	return (ch <= RCABSMAX && ch >= RCABSMIN);
 190:	9c 01       	movw	r18, r24
 192:	24 5f       	subi	r18, 0xF4	; 244
 194:	31 40       	sbci	r19, 0x01	; 1
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	21 3d       	cpi	r18, 0xD1	; 209
 19a:	37 40       	sbci	r19, 0x07	; 7
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <checkPulse+0x10>
 19e:	80 e0       	ldi	r24, 0x00	; 0
}
 1a0:	08 95       	ret

000001a2 <mWRADB>:

// some mess copied from rage bridge firmware
// figure out how this works and probably re-write
int16_t mWRADB(int16_t fromVar, int16_t toVar, int16_t fromLow, int16_t fromHigh, int16_t fromZero, int16_t toLow, int16_t toHigh, int16_t toZero, int16_t db, int16_t upi){
 1a2:	2f 92       	push	r2
 1a4:	3f 92       	push	r3
 1a6:	4f 92       	push	r4
 1a8:	5f 92       	push	r5
 1aa:	6f 92       	push	r6
 1ac:	7f 92       	push	r7
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <mWRADB+0x26>
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	3b 01       	movw	r6, r22
 1ce:	fa 01       	movw	r30, r20
 1d0:	3a 83       	std	Y+2, r19	; 0x02
 1d2:	29 83       	std	Y+1, r18	; 0x01
	int32_t curVar = (int32_t)fromVar;
 1d4:	1c 01       	movw	r2, r24
 1d6:	09 2e       	mov	r0, r25
 1d8:	00 0c       	add	r0, r0
 1da:	44 08       	sbc	r4, r4
 1dc:	55 08       	sbc	r5, r5
	
	if(curVar > fromZero + db){
 1de:	98 01       	movw	r18, r16
 1e0:	28 0d       	add	r18, r8
 1e2:	39 1d       	adc	r19, r9
 1e4:	a9 01       	movw	r20, r18
 1e6:	33 0f       	add	r19, r19
 1e8:	66 0b       	sbc	r22, r22
 1ea:	77 0b       	sbc	r23, r23
 1ec:	42 15       	cp	r20, r2
 1ee:	53 05       	cpc	r21, r3
 1f0:	64 05       	cpc	r22, r4
 1f2:	75 05       	cpc	r23, r5
 1f4:	0c f5       	brge	.+66     	; 0x238 <mWRADB+0x96>
		curVar = (((int32_t)(fromVar - fromZero - db) * (int32_t)(toHigh - toZero)) / (fromHigh - fromZero - db)) + toZero;
 1f6:	80 1b       	sub	r24, r16
 1f8:	91 0b       	sbc	r25, r17
 1fa:	9c 01       	movw	r18, r24
 1fc:	28 19       	sub	r18, r8
 1fe:	39 09       	sbc	r19, r9
 200:	d6 01       	movw	r26, r12
 202:	aa 19       	sub	r26, r10
 204:	bb 09       	sbc	r27, r11
 206:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__mulhisi3>
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	3a 81       	ldd	r19, Y+2	; 0x02
 20e:	20 1b       	sub	r18, r16
 210:	31 0b       	sbc	r19, r17
 212:	28 19       	sub	r18, r8
 214:	39 09       	sbc	r19, r9
 216:	03 2e       	mov	r0, r19
 218:	00 0c       	add	r0, r0
 21a:	44 0b       	sbc	r20, r20
 21c:	55 0b       	sbc	r21, r21
 21e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodsi4>
 222:	c5 01       	movw	r24, r10
 224:	bb 0c       	add	r11, r11
 226:	aa 0b       	sbc	r26, r26
 228:	bb 0b       	sbc	r27, r27
 22a:	89 01       	movw	r16, r18
 22c:	9a 01       	movw	r18, r20
 22e:	08 0f       	add	r16, r24
 230:	19 1f       	adc	r17, r25
 232:	2a 1f       	adc	r18, r26
 234:	3b 1f       	adc	r19, r27
 236:	30 c0       	rjmp	.+96     	; 0x298 <mWRADB+0xf6>
	}else if(curVar < fromZero - db){
 238:	98 01       	movw	r18, r16
 23a:	28 19       	sub	r18, r8
 23c:	39 09       	sbc	r19, r9
 23e:	a9 01       	movw	r20, r18
 240:	33 0f       	add	r19, r19
 242:	66 0b       	sbc	r22, r22
 244:	77 0b       	sbc	r23, r23
 246:	24 16       	cp	r2, r20
 248:	35 06       	cpc	r3, r21
 24a:	46 06       	cpc	r4, r22
 24c:	57 06       	cpc	r5, r23
 24e:	04 f5       	brge	.+64     	; 0x290 <mWRADB+0xee>
		curVar = (((int32_t)(fromVar - fromZero + db) * (int32_t)(toZero - toLow)) / (fromZero - fromLow - db)) + toZero;
 250:	80 1b       	sub	r24, r16
 252:	91 0b       	sbc	r25, r17
 254:	9c 01       	movw	r18, r24
 256:	28 0d       	add	r18, r8
 258:	39 1d       	adc	r19, r9
 25a:	d5 01       	movw	r26, r10
 25c:	ae 19       	sub	r26, r14
 25e:	bf 09       	sbc	r27, r15
 260:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__mulhisi3>
 264:	98 01       	movw	r18, r16
 266:	2e 1b       	sub	r18, r30
 268:	3f 0b       	sbc	r19, r31
 26a:	28 19       	sub	r18, r8
 26c:	39 09       	sbc	r19, r9
 26e:	03 2e       	mov	r0, r19
 270:	00 0c       	add	r0, r0
 272:	44 0b       	sbc	r20, r20
 274:	55 0b       	sbc	r21, r21
 276:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodsi4>
 27a:	c5 01       	movw	r24, r10
 27c:	bb 0c       	add	r11, r11
 27e:	aa 0b       	sbc	r26, r26
 280:	bb 0b       	sbc	r27, r27
 282:	89 01       	movw	r16, r18
 284:	9a 01       	movw	r18, r20
 286:	08 0f       	add	r16, r24
 288:	19 1f       	adc	r17, r25
 28a:	2a 1f       	adc	r18, r26
 28c:	3b 1f       	adc	r19, r27
 28e:	04 c0       	rjmp	.+8      	; 0x298 <mWRADB+0xf6>
	}else{
		curVar = toZero;
 290:	85 01       	movw	r16, r10
 292:	bb 0c       	add	r11, r11
 294:	22 0b       	sbc	r18, r18
 296:	33 0b       	sbc	r19, r19
	}
	
	int16_t intermed = (curVar - toVar);
 298:	c8 01       	movw	r24, r16
 29a:	86 19       	sub	r24, r6
 29c:	97 09       	sbc	r25, r7
	
	if(intermed > upi) return (int16_t)(toVar += upi);
 29e:	4f 89       	ldd	r20, Y+23	; 0x17
 2a0:	58 8d       	ldd	r21, Y+24	; 0x18
 2a2:	48 17       	cp	r20, r24
 2a4:	59 07       	cpc	r21, r25
 2a6:	24 f4       	brge	.+8      	; 0x2b0 <mWRADB+0x10e>
 2a8:	ca 01       	movw	r24, r20
 2aa:	86 0d       	add	r24, r6
 2ac:	97 1d       	adc	r25, r7
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <mWRADB+0x12c>
	else if(intermed < -upi) return (int16_t)(toVar -= upi);
 2b0:	6f 89       	ldd	r22, Y+23	; 0x17
 2b2:	78 8d       	ldd	r23, Y+24	; 0x18
 2b4:	71 95       	neg	r23
 2b6:	61 95       	neg	r22
 2b8:	71 09       	sbc	r23, r1
 2ba:	86 17       	cp	r24, r22
 2bc:	97 07       	cpc	r25, r23
 2be:	34 f4       	brge	.+12     	; 0x2cc <mWRADB+0x12a>
 2c0:	c3 01       	movw	r24, r6
 2c2:	2f 89       	ldd	r18, Y+23	; 0x17
 2c4:	38 8d       	ldd	r19, Y+24	; 0x18
 2c6:	82 1b       	sub	r24, r18
 2c8:	93 0b       	sbc	r25, r19
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <mWRADB+0x12c>
	else return (int16_t)curVar;
 2cc:	c8 01       	movw	r24, r16
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	7f 90       	pop	r7
 2ec:	6f 90       	pop	r6
 2ee:	5f 90       	pop	r5
 2f0:	4f 90       	pop	r4
 2f2:	3f 90       	pop	r3
 2f4:	2f 90       	pop	r2
 2f6:	08 95       	ret

000002f8 <__vector_5>:
	153,154,155,156,158,159,160,161,163,164,165,166,167,169,170,171,172,174,175,176,178,179,180,181,183,184,185,187,188,189,191,192,193,195,196,197,199,
	200,201,203,204,206,207,208,210,211,213,214,215,217,218,220,221,223,224,226,227,228,230,231,233,234,236,237,239,241,242,244,245,247,248,250,251,253,255};

// do stuff on pin change interrupt
// read the pulse width of rc input
ISR(PCINT2_vect){
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
	if(PIND & CH1){
 31e:	4a 9b       	sbis	0x09, 2	; 9
 320:	0b c0       	rjmp	.+22     	; 0x338 <__vector_5+0x40>
		pwRise = micros();
 322:	0e 94 a3 00 	call	0x146	; 0x146 <micros>
 326:	60 93 18 02 	sts	0x0218, r22
 32a:	70 93 19 02 	sts	0x0219, r23
 32e:	80 93 1a 02 	sts	0x021A, r24
 332:	90 93 1b 02 	sts	0x021B, r25
 336:	13 c0       	rjmp	.+38     	; 0x35e <__vector_5+0x66>
		}else{
		pw = (uint16_t)(micros() - pwRise);
 338:	0e 94 a3 00 	call	0x146	; 0x146 <micros>
 33c:	00 91 18 02 	lds	r16, 0x0218
 340:	10 91 19 02 	lds	r17, 0x0219
 344:	20 91 1a 02 	lds	r18, 0x021A
 348:	30 91 1b 02 	lds	r19, 0x021B
 34c:	60 1b       	sub	r22, r16
 34e:	71 0b       	sbc	r23, r17
 350:	70 93 17 02 	sts	0x0217, r23
 354:	60 93 16 02 	sts	0x0216, r22
		pwGood = 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 15 02 	sts	0x0215, r24
	}
}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <main>:

int main(void){
	pinInit();
 384:	0e 94 78 00 	call	0xf0	; 0xf0 <pinInit>
	rcInterruptInit();
 388:	0e 94 81 00 	call	0x102	; 0x102 <rcInterruptInit>
	timerInit();
 38c:	0e 94 8d 00 	call	0x11a	; 0x11a <timerInit>
				pw = RCMIN;
			}
			
			// process the pulse width for output
			if(pwGood){
				rawCmd = mWRADB(pw, rawCmd, RCMIN, RCMAX, RCMID, -MAXPWM, MAXPWM, 0, RCDB, 2);
 390:	68 94       	set
 392:	22 24       	eor	r2, r2
 394:	21 f8       	bld	r2, 1
					PORTD &= ~(DIRA1);
					PORTD |= DIRA2;
				}
			}else{
				// else shut off the pwm
				OCR1A = 0;
 396:	c8 e8       	ldi	r28, 0x88	; 136
 398:	d0 e0       	ldi	r29, 0x00	; 0
			
			// bound the pulse width
			if(pw > RCMAX){
				pw = RCMAX;
			}else if(pw < RCMIN){
				pw = RCMIN;
 39a:	0f 2e       	mov	r0, r31
 39c:	f8 ee       	ldi	r31, 0xE8	; 232
 39e:	4f 2e       	mov	r4, r31
 3a0:	f3 e0       	ldi	r31, 0x03	; 3
 3a2:	5f 2e       	mov	r5, r31
 3a4:	f0 2d       	mov	r31, r0
				pw = lastPw;
			}
			
			// bound the pulse width
			if(pw > RCMAX){
				pw = RCMAX;
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f0 ed       	ldi	r31, 0xD0	; 208
 3aa:	6f 2e       	mov	r6, r31
 3ac:	f7 e0       	ldi	r31, 0x07	; 7
 3ae:	7f 2e       	mov	r7, r31
 3b0:	f0 2d       	mov	r31, r0
				rawCmd = mWRADB(pw, rawCmd, RCMIN, RCMAX, RCMID, -MAXPWM, MAXPWM, 0, RCDB, 2);
			}
			
			// get direction, 1 is forward
			if(rawCmd >= 0){
				dir = 1;
 3b2:	33 24       	eor	r3, r3
 3b4:	33 94       	inc	r3
	rcInterruptInit();
	timerInit();
	
    while(1){
		// update loop every 1 ms
		if(micros() - loopTimer > LOOPTIME){
 3b6:	0e 94 a3 00 	call	0x146	; 0x146 <micros>
 3ba:	00 91 0a 02 	lds	r16, 0x020A
 3be:	10 91 0b 02 	lds	r17, 0x020B
 3c2:	20 91 0c 02 	lds	r18, 0x020C
 3c6:	30 91 0d 02 	lds	r19, 0x020D
 3ca:	dc 01       	movw	r26, r24
 3cc:	cb 01       	movw	r24, r22
 3ce:	80 1b       	sub	r24, r16
 3d0:	91 0b       	sbc	r25, r17
 3d2:	a2 0b       	sbc	r26, r18
 3d4:	b3 0b       	sbc	r27, r19
 3d6:	89 3e       	cpi	r24, 0xE9	; 233
 3d8:	93 40       	sbci	r25, 0x03	; 3
 3da:	a1 05       	cpc	r26, r1
 3dc:	b1 05       	cpc	r27, r1
 3de:	58 f3       	brcs	.-42     	; 0x3b6 <main+0x32>
			loopTimer = micros();
 3e0:	0e 94 a3 00 	call	0x146	; 0x146 <micros>
 3e4:	60 93 0a 02 	sts	0x020A, r22
 3e8:	70 93 0b 02 	sts	0x020B, r23
 3ec:	80 93 0c 02 	sts	0x020C, r24
 3f0:	90 93 0d 02 	sts	0x020D, r25
			
			// check the current pulse reading for validity
			if(checkPulse(pw)){
 3f4:	80 91 16 02 	lds	r24, 0x0216
 3f8:	90 91 17 02 	lds	r25, 0x0217
 3fc:	0e 94 c8 00 	call	0x190	; 0x190 <checkPulse>
 400:	88 23       	and	r24, r24
 402:	49 f0       	breq	.+18     	; 0x416 <main+0x92>
				lastPw = pw;
 404:	80 91 16 02 	lds	r24, 0x0216
 408:	90 91 17 02 	lds	r25, 0x0217
 40c:	90 93 14 02 	sts	0x0214, r25
 410:	80 93 13 02 	sts	0x0213, r24
 414:	0a c0       	rjmp	.+20     	; 0x42a <main+0xa6>
			}else{
				pwGood = 0;
 416:	10 92 15 02 	sts	0x0215, r1
				pw = lastPw;
 41a:	80 91 13 02 	lds	r24, 0x0213
 41e:	90 91 14 02 	lds	r25, 0x0214
 422:	90 93 17 02 	sts	0x0217, r25
 426:	80 93 16 02 	sts	0x0216, r24
			}
			
			// bound the pulse width
			if(pw > RCMAX){
 42a:	80 91 16 02 	lds	r24, 0x0216
 42e:	90 91 17 02 	lds	r25, 0x0217
 432:	81 3d       	cpi	r24, 0xD1	; 209
 434:	97 40       	sbci	r25, 0x07	; 7
 436:	28 f0       	brcs	.+10     	; 0x442 <main+0xbe>
				pw = RCMAX;
 438:	70 92 17 02 	sts	0x0217, r7
 43c:	60 92 16 02 	sts	0x0216, r6
 440:	0b c0       	rjmp	.+22     	; 0x458 <main+0xd4>
			}else if(pw < RCMIN){
 442:	80 91 16 02 	lds	r24, 0x0216
 446:	90 91 17 02 	lds	r25, 0x0217
 44a:	88 3e       	cpi	r24, 0xE8	; 232
 44c:	93 40       	sbci	r25, 0x03	; 3
 44e:	20 f4       	brcc	.+8      	; 0x458 <main+0xd4>
				pw = RCMIN;
 450:	50 92 17 02 	sts	0x0217, r5
 454:	40 92 16 02 	sts	0x0216, r4
			}
			
			// process the pulse width for output
			if(pwGood){
 458:	80 91 15 02 	lds	r24, 0x0215
 45c:	88 23       	and	r24, r24
 45e:	41 f1       	breq	.+80     	; 0x4b0 <main+0x12c>
				rawCmd = mWRADB(pw, rawCmd, RCMIN, RCMAX, RCMID, -MAXPWM, MAXPWM, 0, RCDB, 2);
 460:	80 91 16 02 	lds	r24, 0x0216
 464:	90 91 17 02 	lds	r25, 0x0217
 468:	60 91 11 02 	lds	r22, 0x0211
 46c:	70 91 12 02 	lds	r23, 0x0212
 470:	1f 92       	push	r1
 472:	2f 92       	push	r2
 474:	0f 2e       	mov	r0, r31
 476:	f9 e1       	ldi	r31, 0x19	; 25
 478:	8f 2e       	mov	r8, r31
 47a:	91 2c       	mov	r9, r1
 47c:	f0 2d       	mov	r31, r0
 47e:	a1 2c       	mov	r10, r1
 480:	b1 2c       	mov	r11, r1
 482:	0f 2e       	mov	r0, r31
 484:	fa ef       	ldi	r31, 0xFA	; 250
 486:	cf 2e       	mov	r12, r31
 488:	d1 2c       	mov	r13, r1
 48a:	f0 2d       	mov	r31, r0
 48c:	0f 2e       	mov	r0, r31
 48e:	f6 e0       	ldi	r31, 0x06	; 6
 490:	ef 2e       	mov	r14, r31
 492:	ff 24       	eor	r15, r15
 494:	fa 94       	dec	r15
 496:	f0 2d       	mov	r31, r0
 498:	0c ed       	ldi	r16, 0xDC	; 220
 49a:	15 e0       	ldi	r17, 0x05	; 5
 49c:	93 01       	movw	r18, r6
 49e:	a2 01       	movw	r20, r4
 4a0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mWRADB>
 4a4:	90 93 12 02 	sts	0x0212, r25
 4a8:	80 93 11 02 	sts	0x0211, r24
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
			}
			
			// get direction, 1 is forward
			if(rawCmd >= 0){
 4b0:	80 91 11 02 	lds	r24, 0x0211
 4b4:	90 91 12 02 	lds	r25, 0x0212
 4b8:	99 23       	and	r25, r25
 4ba:	1c f0       	brlt	.+6      	; 0x4c2 <main+0x13e>
				dir = 1;
 4bc:	30 92 0e 02 	sts	0x020E, r3
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <main+0x142>
			}else{
				dir = 0;
 4c2:	10 92 0e 02 	sts	0x020E, r1
			}
			
			cmd = rawCmd;
 4c6:	90 93 10 02 	sts	0x0210, r25
 4ca:	80 93 0f 02 	sts	0x020F, r24
			// get magnitude of cmd
			if(!dir){
 4ce:	20 91 0e 02 	lds	r18, 0x020E
 4d2:	21 11       	cpse	r18, r1
 4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <main+0x160>
				cmd = -(cmd);
 4d6:	91 95       	neg	r25
 4d8:	81 95       	neg	r24
 4da:	91 09       	sbc	r25, r1
 4dc:	90 93 10 02 	sts	0x0210, r25
 4e0:	80 93 0f 02 	sts	0x020F, r24
			}
			
			// exponential lookup and limit output
			cmd = exp1x[cmd];
 4e4:	e0 91 0f 02 	lds	r30, 0x020F
 4e8:	f0 91 10 02 	lds	r31, 0x0210
 4ec:	e0 50       	subi	r30, 0x00	; 0
 4ee:	ff 4f       	sbci	r31, 0xFF	; 255
 4f0:	80 81       	ld	r24, Z
 4f2:	90 e0       	ldi	r25, 0x00	; 0
			if(cmd > MAXPWM){
 4f4:	8b 3f       	cpi	r24, 0xFB	; 251
 4f6:	91 05       	cpc	r25, r1
 4f8:	28 f4       	brcc	.+10     	; 0x504 <main+0x180>
			if(!dir){
				cmd = -(cmd);
			}
			
			// exponential lookup and limit output
			cmd = exp1x[cmd];
 4fa:	90 93 10 02 	sts	0x0210, r25
 4fe:	80 93 0f 02 	sts	0x020F, r24
 502:	06 c0       	rjmp	.+12     	; 0x510 <main+0x18c>
			if(cmd > MAXPWM){
				cmd = MAXPWM;
 504:	8a ef       	ldi	r24, 0xFA	; 250
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	90 93 10 02 	sts	0x0210, r25
 50c:	80 93 0f 02 	sts	0x020F, r24
			}
			
			// if failsafe isnt true, send output to motor
			if(!failsafe){
 510:	80 91 00 02 	lds	r24, 0x0200
 514:	81 11       	cpse	r24, r1
 516:	14 c0       	rjmp	.+40     	; 0x540 <main+0x1bc>
				if(dir){
 518:	22 23       	and	r18, r18
 51a:	49 f0       	breq	.+18     	; 0x52e <main+0x1aa>
					OCR1A = cmd;
 51c:	80 91 0f 02 	lds	r24, 0x020F
 520:	90 91 10 02 	lds	r25, 0x0210
 524:	99 83       	std	Y+1, r25	; 0x01
 526:	88 83       	st	Y, r24
					PORTD |= DIRA1;
 528:	5c 9a       	sbi	0x0b, 4	; 11
					PORTD &= ~(DIRA2);
 52a:	5d 98       	cbi	0x0b, 5	; 11
 52c:	0b c0       	rjmp	.+22     	; 0x544 <main+0x1c0>
				}else{
					OCR1A = cmd;
 52e:	80 91 0f 02 	lds	r24, 0x020F
 532:	90 91 10 02 	lds	r25, 0x0210
 536:	99 83       	std	Y+1, r25	; 0x01
 538:	88 83       	st	Y, r24
					PORTD &= ~(DIRA1);
 53a:	5c 98       	cbi	0x0b, 4	; 11
					PORTD |= DIRA2;
 53c:	5d 9a       	sbi	0x0b, 5	; 11
 53e:	02 c0       	rjmp	.+4      	; 0x544 <main+0x1c0>
				}
			}else{
				// else shut off the pwm
				OCR1A = 0;
 540:	19 82       	std	Y+1, r1	; 0x01
 542:	18 82       	st	Y, r1
			}
			
			// failsafe check
			if(micros() - fsTimer > FSTIME){
 544:	0e 94 a3 00 	call	0x146	; 0x146 <micros>
 548:	00 91 06 02 	lds	r16, 0x0206
 54c:	10 91 07 02 	lds	r17, 0x0207
 550:	20 91 08 02 	lds	r18, 0x0208
 554:	30 91 09 02 	lds	r19, 0x0209
 558:	dc 01       	movw	r26, r24
 55a:	cb 01       	movw	r24, r22
 55c:	80 1b       	sub	r24, r16
 55e:	91 0b       	sbc	r25, r17
 560:	a2 0b       	sbc	r26, r18
 562:	b3 0b       	sbc	r27, r19
 564:	81 32       	cpi	r24, 0x21	; 33
 566:	91 4a       	sbci	r25, 0xA1	; 161
 568:	a7 40       	sbci	r26, 0x07	; 7
 56a:	b1 05       	cpc	r27, r1
 56c:	08 f4       	brcc	.+2      	; 0x570 <main+0x1ec>
 56e:	23 cf       	rjmp	.-442    	; 0x3b6 <main+0x32>
				fsTimer = micros();
 570:	0e 94 a3 00 	call	0x146	; 0x146 <micros>
 574:	60 93 06 02 	sts	0x0206, r22
 578:	70 93 07 02 	sts	0x0207, r23
 57c:	80 93 08 02 	sts	0x0208, r24
 580:	90 93 09 02 	sts	0x0209, r25
				
				if(pwGood){
 584:	80 91 15 02 	lds	r24, 0x0215
 588:	88 23       	and	r24, r24
 58a:	31 f0       	breq	.+12     	; 0x598 <main+0x214>
					PORTD |= (SDPINA | SDPINB);
 58c:	8b b1       	in	r24, 0x0b	; 11
 58e:	89 60       	ori	r24, 0x09	; 9
 590:	8b b9       	out	0x0b, r24	; 11
					failsafe = 0;
 592:	10 92 00 02 	sts	0x0200, r1
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <main+0x21e>
				}else{
					// shutdown the gate drivers
					PORTD &= ~(SDPINA | SDPINB);
 598:	8b b1       	in	r24, 0x0b	; 11
 59a:	86 7f       	andi	r24, 0xF6	; 246
 59c:	8b b9       	out	0x0b, r24	; 11
					failsafe = 1;
 59e:	30 92 00 02 	sts	0x0200, r3
				}
				
				pwGood = 0;
 5a2:	10 92 15 02 	sts	0x0215, r1
 5a6:	07 cf       	rjmp	.-498    	; 0x3b6 <main+0x32>

000005a8 <__divmodsi4>:
 5a8:	05 2e       	mov	r0, r21
 5aa:	97 fb       	bst	r25, 7
 5ac:	1e f4       	brtc	.+6      	; 0x5b4 <__divmodsi4+0xc>
 5ae:	00 94       	com	r0
 5b0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__negsi2>
 5b4:	57 fd       	sbrc	r21, 7
 5b6:	07 d0       	rcall	.+14     	; 0x5c6 <__divmodsi4_neg2>
 5b8:	0e 94 11 03 	call	0x622	; 0x622 <__udivmodsi4>
 5bc:	07 fc       	sbrc	r0, 7
 5be:	03 d0       	rcall	.+6      	; 0x5c6 <__divmodsi4_neg2>
 5c0:	4e f4       	brtc	.+18     	; 0x5d4 <__divmodsi4_exit>
 5c2:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__negsi2>

000005c6 <__divmodsi4_neg2>:
 5c6:	50 95       	com	r21
 5c8:	40 95       	com	r20
 5ca:	30 95       	com	r19
 5cc:	21 95       	neg	r18
 5ce:	3f 4f       	sbci	r19, 0xFF	; 255
 5d0:	4f 4f       	sbci	r20, 0xFF	; 255
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255

000005d4 <__divmodsi4_exit>:
 5d4:	08 95       	ret

000005d6 <__negsi2>:
 5d6:	90 95       	com	r25
 5d8:	80 95       	com	r24
 5da:	70 95       	com	r23
 5dc:	61 95       	neg	r22
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	08 95       	ret

000005e6 <__mulhisi3>:
 5e6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__umulhisi3>
 5ea:	33 23       	and	r19, r19
 5ec:	12 f4       	brpl	.+4      	; 0x5f2 <__mulhisi3+0xc>
 5ee:	8a 1b       	sub	r24, r26
 5f0:	9b 0b       	sbc	r25, r27
 5f2:	0c 94 0c 03 	jmp	0x618	; 0x618 <__usmulhisi3_tail>

000005f6 <__umulhisi3>:
 5f6:	a2 9f       	mul	r26, r18
 5f8:	b0 01       	movw	r22, r0
 5fa:	b3 9f       	mul	r27, r19
 5fc:	c0 01       	movw	r24, r0
 5fe:	a3 9f       	mul	r26, r19
 600:	70 0d       	add	r23, r0
 602:	81 1d       	adc	r24, r1
 604:	11 24       	eor	r1, r1
 606:	91 1d       	adc	r25, r1
 608:	b2 9f       	mul	r27, r18
 60a:	70 0d       	add	r23, r0
 60c:	81 1d       	adc	r24, r1
 60e:	11 24       	eor	r1, r1
 610:	91 1d       	adc	r25, r1
 612:	08 95       	ret

00000614 <__usmulhisi3>:
 614:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__umulhisi3>

00000618 <__usmulhisi3_tail>:
 618:	b7 ff       	sbrs	r27, 7
 61a:	08 95       	ret
 61c:	82 1b       	sub	r24, r18
 61e:	93 0b       	sbc	r25, r19
 620:	08 95       	ret

00000622 <__udivmodsi4>:
 622:	a1 e2       	ldi	r26, 0x21	; 33
 624:	1a 2e       	mov	r1, r26
 626:	aa 1b       	sub	r26, r26
 628:	bb 1b       	sub	r27, r27
 62a:	fd 01       	movw	r30, r26
 62c:	0d c0       	rjmp	.+26     	; 0x648 <__udivmodsi4_ep>

0000062e <__udivmodsi4_loop>:
 62e:	aa 1f       	adc	r26, r26
 630:	bb 1f       	adc	r27, r27
 632:	ee 1f       	adc	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	a2 17       	cp	r26, r18
 638:	b3 07       	cpc	r27, r19
 63a:	e4 07       	cpc	r30, r20
 63c:	f5 07       	cpc	r31, r21
 63e:	20 f0       	brcs	.+8      	; 0x648 <__udivmodsi4_ep>
 640:	a2 1b       	sub	r26, r18
 642:	b3 0b       	sbc	r27, r19
 644:	e4 0b       	sbc	r30, r20
 646:	f5 0b       	sbc	r31, r21

00000648 <__udivmodsi4_ep>:
 648:	66 1f       	adc	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	1a 94       	dec	r1
 652:	69 f7       	brne	.-38     	; 0x62e <__udivmodsi4_loop>
 654:	60 95       	com	r22
 656:	70 95       	com	r23
 658:	80 95       	com	r24
 65a:	90 95       	com	r25
 65c:	9b 01       	movw	r18, r22
 65e:	ac 01       	movw	r20, r24
 660:	bd 01       	movw	r22, r26
 662:	cf 01       	movw	r24, r30
 664:	08 95       	ret

00000666 <_exit>:
 666:	f8 94       	cli

00000668 <__stop_program>:
 668:	ff cf       	rjmp	.-2      	; 0x668 <__stop_program>
